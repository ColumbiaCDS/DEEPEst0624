// Generated by rstantools.  Do not edit by hand.

/*
    DEEPEst0624 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DEEPEst0624 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DEEPEst0624.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_Stan_Risk_Hier_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Stan_Risk_Hier");
    reader.add_event(84, 82, "end", "model_Stan_Risk_Hier");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type
cal_value(const T0__& x,
              const T1__& p,
              const T2__& y,
              const T3__& q,
              const T4__& alpha,
              const T5__& sigma,
              const T6__& lambda, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ v;
        (void) v;  // dummy to suppress unused var warning

        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v,DUMMY_VAR__);


        current_statement_begin__ = 4;
        if (as_bool((primitive_value(logical_lt(x,0)) && primitive_value(logical_lt(0,y))))) {
            current_statement_begin__ = 5;
            stan::math::assign(v, (((stan::math::exp(-(pow(-(stan::math::log(p)),alpha))) * -(lambda)) * pow(-(x),sigma)) + (stan::math::exp(-(pow(-(stan::math::log(q)),alpha))) * pow(y,sigma))));
        } else if (as_bool((primitive_value(logical_lt(y,0)) && primitive_value(logical_lt(x,0))))) {
            current_statement_begin__ = 7;
            stan::math::assign(v, ((-(lambda) * pow(-(y),sigma)) + (stan::math::exp(-(pow(-(stan::math::log(p)),alpha))) * ((-(lambda) * pow(-(x),sigma)) - (-(lambda) * pow(-(y),sigma))))));
        } else {
            current_statement_begin__ = 9;
            stan::math::assign(v, (pow(y,sigma) + (stan::math::exp(-(pow(-(stan::math::log(p)),alpha))) * (pow(x,sigma) - pow(y,sigma)))));
        }
        current_statement_begin__ = 10;
        return stan::math::promote_scalar<fun_return_scalar_t__>(v);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct cal_value_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type
    operator()(const T0__& x,
              const T1__& p,
              const T2__& y,
              const T3__& q,
              const T4__& alpha,
              const T5__& sigma,
              const T6__& lambda, std::ostream* pstream__) const {
        return cal_value(x, p, y, q, alpha, sigma, lambda, pstream__);
    }
};

#include <stan_meta_header.hpp>
 class model_Stan_Risk_Hier : public prob_grad {
private:
    int nchoice;
    int npart;
    matrix_d x1;
    matrix_d p1;
    matrix_d y1;
    matrix_d q1;
    matrix_d x2;
    matrix_d p2;
    matrix_d y2;
    matrix_d q2;
    vector<vector<int> > choices;
public:
    model_Stan_Risk_Hier(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_Stan_Risk_Hier(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_Stan_Risk_Hier_namespace::model_Stan_Risk_Hier";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "nchoice", "int", context__.to_vec());
            nchoice = int(0);
            vals_i__ = context__.vals_i("nchoice");
            pos__ = 0;
            nchoice = vals_i__[pos__++];
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "npart", "int", context__.to_vec());
            npart = int(0);
            vals_i__ = context__.vals_i("npart");
            pos__ = 0;
            npart = vals_i__[pos__++];
            current_statement_begin__ = 16;
            validate_non_negative_index("x1", "npart", npart);
            validate_non_negative_index("x1", "nchoice", nchoice);
            context__.validate_dims("data initialization", "x1", "matrix_d", context__.to_vec(npart,nchoice));
            validate_non_negative_index("x1", "npart", npart);
            validate_non_negative_index("x1", "nchoice", nchoice);
            x1 = matrix_d(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            vals_r__ = context__.vals_r("x1");
            pos__ = 0;
            size_t x1_m_mat_lim__ = npart;
            size_t x1_n_mat_lim__ = nchoice;
            for (size_t n_mat__ = 0; n_mat__ < x1_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < x1_m_mat_lim__; ++m_mat__) {
                    x1(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("p1", "npart", npart);
            validate_non_negative_index("p1", "nchoice", nchoice);
            context__.validate_dims("data initialization", "p1", "matrix_d", context__.to_vec(npart,nchoice));
            validate_non_negative_index("p1", "npart", npart);
            validate_non_negative_index("p1", "nchoice", nchoice);
            p1 = matrix_d(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            vals_r__ = context__.vals_r("p1");
            pos__ = 0;
            size_t p1_m_mat_lim__ = npart;
            size_t p1_n_mat_lim__ = nchoice;
            for (size_t n_mat__ = 0; n_mat__ < p1_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < p1_m_mat_lim__; ++m_mat__) {
                    p1(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("y1", "npart", npart);
            validate_non_negative_index("y1", "nchoice", nchoice);
            context__.validate_dims("data initialization", "y1", "matrix_d", context__.to_vec(npart,nchoice));
            validate_non_negative_index("y1", "npart", npart);
            validate_non_negative_index("y1", "nchoice", nchoice);
            y1 = matrix_d(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            vals_r__ = context__.vals_r("y1");
            pos__ = 0;
            size_t y1_m_mat_lim__ = npart;
            size_t y1_n_mat_lim__ = nchoice;
            for (size_t n_mat__ = 0; n_mat__ < y1_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y1_m_mat_lim__; ++m_mat__) {
                    y1(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("q1", "npart", npart);
            validate_non_negative_index("q1", "nchoice", nchoice);
            context__.validate_dims("data initialization", "q1", "matrix_d", context__.to_vec(npart,nchoice));
            validate_non_negative_index("q1", "npart", npart);
            validate_non_negative_index("q1", "nchoice", nchoice);
            q1 = matrix_d(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            vals_r__ = context__.vals_r("q1");
            pos__ = 0;
            size_t q1_m_mat_lim__ = npart;
            size_t q1_n_mat_lim__ = nchoice;
            for (size_t n_mat__ = 0; n_mat__ < q1_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < q1_m_mat_lim__; ++m_mat__) {
                    q1(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("x2", "npart", npart);
            validate_non_negative_index("x2", "nchoice", nchoice);
            context__.validate_dims("data initialization", "x2", "matrix_d", context__.to_vec(npart,nchoice));
            validate_non_negative_index("x2", "npart", npart);
            validate_non_negative_index("x2", "nchoice", nchoice);
            x2 = matrix_d(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            vals_r__ = context__.vals_r("x2");
            pos__ = 0;
            size_t x2_m_mat_lim__ = npart;
            size_t x2_n_mat_lim__ = nchoice;
            for (size_t n_mat__ = 0; n_mat__ < x2_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < x2_m_mat_lim__; ++m_mat__) {
                    x2(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("p2", "npart", npart);
            validate_non_negative_index("p2", "nchoice", nchoice);
            context__.validate_dims("data initialization", "p2", "matrix_d", context__.to_vec(npart,nchoice));
            validate_non_negative_index("p2", "npart", npart);
            validate_non_negative_index("p2", "nchoice", nchoice);
            p2 = matrix_d(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            vals_r__ = context__.vals_r("p2");
            pos__ = 0;
            size_t p2_m_mat_lim__ = npart;
            size_t p2_n_mat_lim__ = nchoice;
            for (size_t n_mat__ = 0; n_mat__ < p2_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < p2_m_mat_lim__; ++m_mat__) {
                    p2(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("y2", "npart", npart);
            validate_non_negative_index("y2", "nchoice", nchoice);
            context__.validate_dims("data initialization", "y2", "matrix_d", context__.to_vec(npart,nchoice));
            validate_non_negative_index("y2", "npart", npart);
            validate_non_negative_index("y2", "nchoice", nchoice);
            y2 = matrix_d(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            vals_r__ = context__.vals_r("y2");
            pos__ = 0;
            size_t y2_m_mat_lim__ = npart;
            size_t y2_n_mat_lim__ = nchoice;
            for (size_t n_mat__ = 0; n_mat__ < y2_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < y2_m_mat_lim__; ++m_mat__) {
                    y2(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("q2", "npart", npart);
            validate_non_negative_index("q2", "nchoice", nchoice);
            context__.validate_dims("data initialization", "q2", "matrix_d", context__.to_vec(npart,nchoice));
            validate_non_negative_index("q2", "npart", npart);
            validate_non_negative_index("q2", "nchoice", nchoice);
            q2 = matrix_d(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            vals_r__ = context__.vals_r("q2");
            pos__ = 0;
            size_t q2_m_mat_lim__ = npart;
            size_t q2_n_mat_lim__ = nchoice;
            for (size_t n_mat__ = 0; n_mat__ < q2_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < q2_m_mat_lim__; ++m_mat__) {
                    q2(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("choices", "npart", npart);
            validate_non_negative_index("choices", "nchoice", nchoice);
            context__.validate_dims("data initialization", "choices", "int", context__.to_vec(npart,nchoice));
            validate_non_negative_index("choices", "npart", npart);
            validate_non_negative_index("choices", "nchoice", nchoice);
            choices = std::vector<std::vector<int> >(npart,std::vector<int>(nchoice,int(0)));
            vals_i__ = context__.vals_i("choices");
            pos__ = 0;
            size_t choices_limit_1__ = nchoice;
            for (size_t i_1__ = 0; i_1__ < choices_limit_1__; ++i_1__) {
                size_t choices_limit_0__ = npart;
                for (size_t i_0__ = 0; i_0__ < choices_limit_0__; ++i_0__) {
                    choices[i_0__][i_1__] = vals_i__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 14;
            check_greater_or_equal(function__,"nchoice",nchoice,1);
            current_statement_begin__ = 15;
            check_greater_or_equal(function__,"npart",npart,1);
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;
            current_statement_begin__ = 18;
            current_statement_begin__ = 19;
            current_statement_begin__ = 20;
            current_statement_begin__ = 21;
            current_statement_begin__ = 22;
            current_statement_begin__ = 23;
            current_statement_begin__ = 24;
            for (int k0__ = 0; k0__ < npart; ++k0__) {
                for (int k1__ = 0; k1__ < nchoice; ++k1__) {
                    check_greater_or_equal(function__,"choices[k0__][k1__]",choices[k0__][k1__],0);
                    check_less_or_equal(function__,"choices[k0__][k1__]",choices[k0__][k1__],1);
                }
            }
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 27;
            ++num_params_r__;
            current_statement_begin__ = 28;
            ++num_params_r__;
            current_statement_begin__ = 29;
            validate_non_negative_index("alpha", "npart", npart);
            num_params_r__ += npart;
            current_statement_begin__ = 30;
            ++num_params_r__;
            current_statement_begin__ = 31;
            ++num_params_r__;
            current_statement_begin__ = 32;
            validate_non_negative_index("sigma", "npart", npart);
            num_params_r__ += npart;
            current_statement_begin__ = 33;
            ++num_params_r__;
            current_statement_begin__ = 34;
            ++num_params_r__;
            current_statement_begin__ = 35;
            validate_non_negative_index("lambda", "npart", npart);
            num_params_r__ += npart;
            current_statement_begin__ = 36;
            ++num_params_r__;
            current_statement_begin__ = 37;
            ++num_params_r__;
            current_statement_begin__ = 38;
            validate_non_negative_index("theta", "npart", npart);
            num_params_r__ += npart;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_Stan_Risk_Hier() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mualpha")))
            throw std::runtime_error("variable mualpha missing");
        vals_r__ = context__.vals_r("mualpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "mualpha", "double", context__.to_vec());
        double mualpha(0);
        mualpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mualpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mualpha: ") + e.what());
        }

        if (!(context__.contains_r("sigmaalpha")))
            throw std::runtime_error("variable sigmaalpha missing");
        vals_r__ = context__.vals_r("sigmaalpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmaalpha", "double", context__.to_vec());
        double sigmaalpha(0);
        sigmaalpha = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,2,sigmaalpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmaalpha: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "npart", npart);
        context__.validate_dims("initialization", "alpha", "vector_d", context__.to_vec(npart));
        vector_d alpha(static_cast<Eigen::VectorXd::Index>(npart));
        for (int j1__ = 0U; j1__ < npart; ++j1__)
            alpha(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0.050000000000000003,2,alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("musigma")))
            throw std::runtime_error("variable musigma missing");
        vals_r__ = context__.vals_r("musigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "musigma", "double", context__.to_vec());
        double musigma(0);
        musigma = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(musigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable musigma: ") + e.what());
        }

        if (!(context__.contains_r("sigmasigma")))
            throw std::runtime_error("variable sigmasigma missing");
        vals_r__ = context__.vals_r("sigmasigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmasigma", "double", context__.to_vec());
        double sigmasigma(0);
        sigmasigma = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,2,sigmasigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmasigma: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "npart", npart);
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec(npart));
        vector_d sigma(static_cast<Eigen::VectorXd::Index>(npart));
        for (int j1__ = 0U; j1__ < npart; ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0.050000000000000003,2,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("mulambda")))
            throw std::runtime_error("variable mulambda missing");
        vals_r__ = context__.vals_r("mulambda");
        pos__ = 0U;
        context__.validate_dims("initialization", "mulambda", "double", context__.to_vec());
        double mulambda(0);
        mulambda = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mulambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mulambda: ") + e.what());
        }

        if (!(context__.contains_r("sigmalambda")))
            throw std::runtime_error("variable sigmalambda missing");
        vals_r__ = context__.vals_r("sigmalambda");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmalambda", "double", context__.to_vec());
        double sigmalambda(0);
        sigmalambda = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,2,sigmalambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmalambda: ") + e.what());
        }

        if (!(context__.contains_r("lambda")))
            throw std::runtime_error("variable lambda missing");
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "npart", npart);
        context__.validate_dims("initialization", "lambda", "vector_d", context__.to_vec(npart));
        vector_d lambda(static_cast<Eigen::VectorXd::Index>(npart));
        for (int j1__ = 0U; j1__ < npart; ++j1__)
            lambda(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0.050000000000000003,10,lambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda: ") + e.what());
        }

        if (!(context__.contains_r("mutheta")))
            throw std::runtime_error("variable mutheta missing");
        vals_r__ = context__.vals_r("mutheta");
        pos__ = 0U;
        context__.validate_dims("initialization", "mutheta", "double", context__.to_vec());
        double mutheta(0);
        mutheta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mutheta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mutheta: ") + e.what());
        }

        if (!(context__.contains_r("sigmatheta")))
            throw std::runtime_error("variable sigmatheta missing");
        vals_r__ = context__.vals_r("sigmatheta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmatheta", "double", context__.to_vec());
        double sigmatheta(0);
        sigmatheta = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,2,sigmatheta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmatheta: ") + e.what());
        }

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "npart", npart);
        context__.validate_dims("initialization", "theta", "vector_d", context__.to_vec(npart));
        vector_d theta(static_cast<Eigen::VectorXd::Index>(npart));
        for (int j1__ = 0U; j1__ < npart; ++j1__)
            theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ mualpha;
            (void) mualpha;  // dummy to suppress unused var warning
            if (jacobian__)
                mualpha = in__.scalar_constrain(lp__);
            else
                mualpha = in__.scalar_constrain();

            local_scalar_t__ sigmaalpha;
            (void) sigmaalpha;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaalpha = in__.scalar_lub_constrain(0,2,lp__);
            else
                sigmaalpha = in__.scalar_lub_constrain(0,2);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lub_constrain(0.050000000000000003,2,npart,lp__);
            else
                alpha = in__.vector_lub_constrain(0.050000000000000003,2,npart);

            local_scalar_t__ musigma;
            (void) musigma;  // dummy to suppress unused var warning
            if (jacobian__)
                musigma = in__.scalar_constrain(lp__);
            else
                musigma = in__.scalar_constrain();

            local_scalar_t__ sigmasigma;
            (void) sigmasigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmasigma = in__.scalar_lub_constrain(0,2,lp__);
            else
                sigmasigma = in__.scalar_lub_constrain(0,2);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lub_constrain(0.050000000000000003,2,npart,lp__);
            else
                sigma = in__.vector_lub_constrain(0.050000000000000003,2,npart);

            local_scalar_t__ mulambda;
            (void) mulambda;  // dummy to suppress unused var warning
            if (jacobian__)
                mulambda = in__.scalar_constrain(lp__);
            else
                mulambda = in__.scalar_constrain();

            local_scalar_t__ sigmalambda;
            (void) sigmalambda;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmalambda = in__.scalar_lub_constrain(0,2,lp__);
            else
                sigmalambda = in__.scalar_lub_constrain(0,2);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.vector_lub_constrain(0.050000000000000003,10,npart,lp__);
            else
                lambda = in__.vector_lub_constrain(0.050000000000000003,10,npart);

            local_scalar_t__ mutheta;
            (void) mutheta;  // dummy to suppress unused var warning
            if (jacobian__)
                mutheta = in__.scalar_constrain(lp__);
            else
                mutheta = in__.scalar_constrain();

            local_scalar_t__ sigmatheta;
            (void) sigmatheta;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmatheta = in__.scalar_lub_constrain(0,2,lp__);
            else
                sigmatheta = in__.scalar_lub_constrain(0,2);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.vector_lb_constrain(0,npart,lp__);
            else
                theta = in__.vector_lb_constrain(0,npart);


            // transformed parameters
            current_statement_begin__ = 41;
            validate_non_negative_index("v1", "npart", npart);
            validate_non_negative_index("v1", "nchoice", nchoice);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v1(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            (void) v1;  // dummy to suppress unused var warning

            stan::math::initialize(v1, DUMMY_VAR__);
            stan::math::fill(v1,DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("v2", "npart", npart);
            validate_non_negative_index("v2", "nchoice", nchoice);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v2(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            (void) v2;  // dummy to suppress unused var warning

            stan::math::initialize(v2, DUMMY_VAR__);
            stan::math::fill(v2,DUMMY_VAR__);


            current_statement_begin__ = 43;
            for (int p = 1; p <= npart; ++p) {

                current_statement_begin__ = 44;
                for (int i = 1; i <= nchoice; ++i) {

                    current_statement_begin__ = 45;
                    stan::model::assign(v1, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                cal_value(get_base1(x1,p,i,"x1",1),get_base1(p1,p,i,"p1",1),get_base1(y1,p,i,"y1",1),get_base1(q1,p,i,"q1",1),get_base1(alpha,p,"alpha",1),get_base1(sigma,p,"sigma",1),get_base1(lambda,p,"lambda",1), pstream__), 
                                "assigning variable v1");
                    current_statement_begin__ = 46;
                    stan::model::assign(v2, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                cal_value(get_base1(x2,p,i,"x2",1),get_base1(p2,p,i,"p2",1),get_base1(y2,p,i,"y2",1),get_base1(q2,p,i,"q2",1),get_base1(alpha,p,"alpha",1),get_base1(sigma,p,"sigma",1),get_base1(lambda,p,"lambda",1), pstream__), 
                                "assigning variable v2");
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < npart; ++i0__) {
                for (int i1__ = 0; i1__ < nchoice; ++i1__) {
                    if (stan::math::is_uninitialized(v1(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: v1" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < npart; ++i0__) {
                for (int i1__ = 0; i1__ < nchoice; ++i1__) {
                    if (stan::math::is_uninitialized(v2(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: v2" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 41;
            current_statement_begin__ = 42;

            // model body

            current_statement_begin__ = 51;
            lp_accum__.add(normal_log<propto__>(mualpha, 0.59999999999999998, 1));
            current_statement_begin__ = 52;
            lp_accum__.add(normal_log<propto__>(musigma, 0.80000000000000004, 1));
            current_statement_begin__ = 53;
            lp_accum__.add(normal_log<propto__>(mulambda, 1.8, 1));
            current_statement_begin__ = 54;
            lp_accum__.add(uniform_log<propto__>(mutheta, -(5), 1));
            current_statement_begin__ = 55;
            lp_accum__.add(uniform_log<propto__>(sigmaalpha, 0, 2));
            current_statement_begin__ = 56;
            lp_accum__.add(uniform_log<propto__>(sigmasigma, 0, 2));
            current_statement_begin__ = 57;
            lp_accum__.add(uniform_log<propto__>(sigmalambda, 0, 2));
            current_statement_begin__ = 58;
            lp_accum__.add(uniform_log<propto__>(sigmatheta, 0, 2));
            current_statement_begin__ = 59;
            lp_accum__.add(lognormal_log<propto__>(theta, mutheta, sigmatheta));
            current_statement_begin__ = 60;
            for (int p = 1; p <= npart; ++p) {

                current_statement_begin__ = 61;
                lp_accum__.add(normal_log<propto__>(get_base1(alpha,p,"alpha",1), mualpha, sigmaalpha));
                if (get_base1(alpha,p,"alpha",1) < 0.050000000000000003) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(alpha,p,"alpha",1) > 2) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(2, mualpha, sigmaalpha), normal_cdf_log(0.050000000000000003, mualpha, sigmaalpha)));
                current_statement_begin__ = 62;
                lp_accum__.add(normal_log<propto__>(get_base1(sigma,p,"sigma",1), musigma, sigmasigma));
                if (get_base1(sigma,p,"sigma",1) < 0.050000000000000003) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(sigma,p,"sigma",1) > 2) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(2, musigma, sigmasigma), normal_cdf_log(0.050000000000000003, musigma, sigmasigma)));
                current_statement_begin__ = 63;
                lp_accum__.add(lognormal_log<propto__>(get_base1(lambda,p,"lambda",1), mulambda, sigmalambda));
                if (get_base1(lambda,p,"lambda",1) < 0.050000000000000003) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(lambda,p,"lambda",1) > 10) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(lognormal_cdf_log(10, mulambda, sigmalambda), lognormal_cdf_log(0.050000000000000003, mulambda, sigmalambda)));
            }
            current_statement_begin__ = 65;
            for (int p = 1; p <= npart; ++p) {

                current_statement_begin__ = 66;
                lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(choices,p,"choices",1), multiply(get_base1(theta,p,"theta",1),subtract(get_base1(v2,p,"v2",1),get_base1(v1,p,"v1",1)))));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mualpha");
        names__.push_back("sigmaalpha");
        names__.push_back("alpha");
        names__.push_back("musigma");
        names__.push_back("sigmasigma");
        names__.push_back("sigma");
        names__.push_back("mulambda");
        names__.push_back("sigmalambda");
        names__.push_back("lambda");
        names__.push_back("mutheta");
        names__.push_back("sigmatheta");
        names__.push_back("theta");
        names__.push_back("v1");
        names__.push_back("v2");
        names__.push_back("postpred");
        names__.push_back("gsq");
        names__.push_back("ll");
        names__.push_back("choiceper");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dims__.push_back(nchoice);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dims__.push_back(nchoice);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dims__.push_back(nchoice);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nchoice);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_Stan_Risk_Hier_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mualpha = in__.scalar_constrain();
        double sigmaalpha = in__.scalar_lub_constrain(0,2);
        vector_d alpha = in__.vector_lub_constrain(0.050000000000000003,2,npart);
        double musigma = in__.scalar_constrain();
        double sigmasigma = in__.scalar_lub_constrain(0,2);
        vector_d sigma = in__.vector_lub_constrain(0.050000000000000003,2,npart);
        double mulambda = in__.scalar_constrain();
        double sigmalambda = in__.scalar_lub_constrain(0,2);
        vector_d lambda = in__.vector_lub_constrain(0.050000000000000003,10,npart);
        double mutheta = in__.scalar_constrain();
        double sigmatheta = in__.scalar_lub_constrain(0,2);
        vector_d theta = in__.vector_lb_constrain(0,npart);
        vars__.push_back(mualpha);
        vars__.push_back(sigmaalpha);
            for (int k_0__ = 0; k_0__ < npart; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
        vars__.push_back(musigma);
        vars__.push_back(sigmasigma);
            for (int k_0__ = 0; k_0__ < npart; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
            }
        vars__.push_back(mulambda);
        vars__.push_back(sigmalambda);
            for (int k_0__ = 0; k_0__ < npart; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
            }
        vars__.push_back(mutheta);
        vars__.push_back(sigmatheta);
            for (int k_0__ = 0; k_0__ < npart; ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 41;
            validate_non_negative_index("v1", "npart", npart);
            validate_non_negative_index("v1", "nchoice", nchoice);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v1(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            (void) v1;  // dummy to suppress unused var warning

            stan::math::initialize(v1, DUMMY_VAR__);
            stan::math::fill(v1,DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("v2", "npart", npart);
            validate_non_negative_index("v2", "nchoice", nchoice);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  v2(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            (void) v2;  // dummy to suppress unused var warning

            stan::math::initialize(v2, DUMMY_VAR__);
            stan::math::fill(v2,DUMMY_VAR__);


            current_statement_begin__ = 43;
            for (int p = 1; p <= npart; ++p) {

                current_statement_begin__ = 44;
                for (int i = 1; i <= nchoice; ++i) {

                    current_statement_begin__ = 45;
                    stan::model::assign(v1, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                cal_value(get_base1(x1,p,i,"x1",1),get_base1(p1,p,i,"p1",1),get_base1(y1,p,i,"y1",1),get_base1(q1,p,i,"q1",1),get_base1(alpha,p,"alpha",1),get_base1(sigma,p,"sigma",1),get_base1(lambda,p,"lambda",1), pstream__), 
                                "assigning variable v1");
                    current_statement_begin__ = 46;
                    stan::model::assign(v2, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                cal_value(get_base1(x2,p,i,"x2",1),get_base1(p2,p,i,"p2",1),get_base1(y2,p,i,"y2",1),get_base1(q2,p,i,"q2",1),get_base1(alpha,p,"alpha",1),get_base1(sigma,p,"sigma",1),get_base1(lambda,p,"lambda",1), pstream__), 
                                "assigning variable v2");
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 41;
            current_statement_begin__ = 42;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < nchoice; ++k_1__) {
                for (int k_0__ = 0; k_0__ < npart; ++k_0__) {
                vars__.push_back(v1(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < nchoice; ++k_1__) {
                for (int k_0__ = 0; k_0__ < npart; ++k_0__) {
                vars__.push_back(v2(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 70;
            validate_non_negative_index("postpred", "npart", npart);
            validate_non_negative_index("postpred", "nchoice", nchoice);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  postpred(static_cast<Eigen::VectorXd::Index>(npart),static_cast<Eigen::VectorXd::Index>(nchoice));
            (void) postpred;  // dummy to suppress unused var warning

            stan::math::initialize(postpred, DUMMY_VAR__);
            stan::math::fill(postpred,DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("gsq", "npart", npart);
            vector<local_scalar_t__> gsq(npart);
            stan::math::initialize(gsq, DUMMY_VAR__);
            stan::math::fill(gsq,DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("ll", "nchoice", nchoice);
            vector<local_scalar_t__> ll(nchoice);
            stan::math::initialize(ll, DUMMY_VAR__);
            stan::math::fill(ll,DUMMY_VAR__);
            current_statement_begin__ = 73;
            local_scalar_t__ choiceper;
            (void) choiceper;  // dummy to suppress unused var warning

            stan::math::initialize(choiceper, DUMMY_VAR__);
            stan::math::fill(choiceper,DUMMY_VAR__);


            current_statement_begin__ = 74;
            for (int p = 1; p <= npart; ++p) {

                current_statement_begin__ = 75;
                for (int i = 1; i <= nchoice; ++i) {

                    current_statement_begin__ = 76;
                    stan::model::assign(postpred, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                bernoulli_logit_rng((get_base1(theta,p,"theta",1) * (get_base1(v2,p,i,"v2",1) - get_base1(v1,p,i,"v1",1))), base_rng__), 
                                "assigning variable postpred");
                    current_statement_begin__ = 77;
                    stan::math::assign(choiceper, inv_logit((get_base1(theta,p,"theta",1) * (get_base1(v2,p,i,"v2",1) - get_base1(v1,p,i,"v1",1)))));
                    current_statement_begin__ = 78;
                    stan::model::assign(ll, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (logical_eq(get_base1(get_base1(choices,p,"choices",1),i,"choices",2),1) ? stan::math::log(choiceper) : stan::math::log((1 - choiceper)) ), 
                                "assigning variable ll");
                }
                current_statement_begin__ = 80;
                stan::model::assign(gsq, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            (-(2) * sum(ll)), 
                            "assigning variable gsq");
            }

            // validate generated quantities
            current_statement_begin__ = 70;
            current_statement_begin__ = 71;
            for (int k0__ = 0; k0__ < npart; ++k0__) {
                check_greater_or_equal(function__,"gsq[k0__]",gsq[k0__],0);
            }
            current_statement_begin__ = 72;
            current_statement_begin__ = 73;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < nchoice; ++k_1__) {
                for (int k_0__ = 0; k_0__ < npart; ++k_0__) {
                vars__.push_back(postpred(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < npart; ++k_0__) {
            vars__.push_back(gsq[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nchoice; ++k_0__) {
            vars__.push_back(ll[k_0__]);
            }
        vars__.push_back(choiceper);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_Stan_Risk_Hier";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mualpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaalpha";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "musigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mulambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmalambda";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mutheta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmatheta";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= nchoice; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "v1" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nchoice; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "v2" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= nchoice; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "postpred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gsq" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nchoice; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "choiceper";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mualpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaalpha";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "musigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmasigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mulambda";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmalambda";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mutheta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmatheta";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= nchoice; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "v1" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nchoice; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "v2" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= nchoice; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "postpred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= npart; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gsq" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nchoice; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "choiceper";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_Stan_Risk_Hier_namespace::model_Stan_Risk_Hier stan_model;


#endif
