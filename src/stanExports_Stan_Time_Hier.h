// Generated by rstantools.  Do not edit by hand.

/*
    DEEPEst is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DEEPEst is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DEEPEst.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_Stan_Time_Hier_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Stan_Time_Hier");
    reader.add_event(67, 65, "end", "model_Stan_Time_Hier");
    return reader;
}
#include <stan_meta_header.hpp>
class model_Stan_Time_Hier : public prob_grad {
private:
        int nchoice;
        int npart;
        matrix_d ss_amnt;
        matrix_d ss_delay;
        matrix_d ll_amnt;
        matrix_d ll_delay;
        std::vector<std::vector<int> > choices;
public:
    model_Stan_Time_Hier(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_Stan_Time_Hier(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_Stan_Time_Hier_namespace::model_Stan_Time_Hier";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "nchoice", "int", context__.to_vec());
            nchoice = int(0);
            vals_i__ = context__.vals_i("nchoice");
            pos__ = 0;
            nchoice = vals_i__[pos__++];
            check_greater_or_equal(function__, "nchoice", nchoice, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "npart", "int", context__.to_vec());
            npart = int(0);
            vals_i__ = context__.vals_i("npart");
            pos__ = 0;
            npart = vals_i__[pos__++];
            check_greater_or_equal(function__, "npart", npart, 1);
            current_statement_begin__ = 4;
            validate_non_negative_index("ss_amnt", "npart", npart);
            validate_non_negative_index("ss_amnt", "nchoice", nchoice);
            context__.validate_dims("data initialization", "ss_amnt", "matrix_d", context__.to_vec(npart,nchoice));
            ss_amnt = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(npart, nchoice);
            vals_r__ = context__.vals_r("ss_amnt");
            pos__ = 0;
            size_t ss_amnt_j_2_max__ = nchoice;
            size_t ss_amnt_j_1_max__ = npart;
            for (size_t j_2__ = 0; j_2__ < ss_amnt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ss_amnt_j_1_max__; ++j_1__) {
                    ss_amnt(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("ss_delay", "npart", npart);
            validate_non_negative_index("ss_delay", "nchoice", nchoice);
            context__.validate_dims("data initialization", "ss_delay", "matrix_d", context__.to_vec(npart,nchoice));
            ss_delay = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(npart, nchoice);
            vals_r__ = context__.vals_r("ss_delay");
            pos__ = 0;
            size_t ss_delay_j_2_max__ = nchoice;
            size_t ss_delay_j_1_max__ = npart;
            for (size_t j_2__ = 0; j_2__ < ss_delay_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ss_delay_j_1_max__; ++j_1__) {
                    ss_delay(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("ll_amnt", "npart", npart);
            validate_non_negative_index("ll_amnt", "nchoice", nchoice);
            context__.validate_dims("data initialization", "ll_amnt", "matrix_d", context__.to_vec(npart,nchoice));
            ll_amnt = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(npart, nchoice);
            vals_r__ = context__.vals_r("ll_amnt");
            pos__ = 0;
            size_t ll_amnt_j_2_max__ = nchoice;
            size_t ll_amnt_j_1_max__ = npart;
            for (size_t j_2__ = 0; j_2__ < ll_amnt_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ll_amnt_j_1_max__; ++j_1__) {
                    ll_amnt(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("ll_delay", "npart", npart);
            validate_non_negative_index("ll_delay", "nchoice", nchoice);
            context__.validate_dims("data initialization", "ll_delay", "matrix_d", context__.to_vec(npart,nchoice));
            ll_delay = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(npart, nchoice);
            vals_r__ = context__.vals_r("ll_delay");
            pos__ = 0;
            size_t ll_delay_j_2_max__ = nchoice;
            size_t ll_delay_j_1_max__ = npart;
            for (size_t j_2__ = 0; j_2__ < ll_delay_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ll_delay_j_1_max__; ++j_1__) {
                    ll_delay(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("choices", "npart", npart);
            validate_non_negative_index("choices", "nchoice", nchoice);
            context__.validate_dims("data initialization", "choices", "int", context__.to_vec(npart,nchoice));
            choices = std::vector<std::vector<int> >(npart, std::vector<int>(nchoice, int(0)));
            vals_i__ = context__.vals_i("choices");
            pos__ = 0;
            size_t choices_k_0_max__ = npart;
            size_t choices_k_1_max__ = nchoice;
            for (size_t k_1__ = 0; k_1__ < choices_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < choices_k_0_max__; ++k_0__) {
                    choices[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 11;
            num_params_r__ += 1;
            current_statement_begin__ = 12;
            num_params_r__ += 1;
            current_statement_begin__ = 13;
            num_params_r__ += 1;
            current_statement_begin__ = 14;
            num_params_r__ += 1;
            current_statement_begin__ = 15;
            num_params_r__ += 1;
            current_statement_begin__ = 16;
            num_params_r__ += 1;
            current_statement_begin__ = 17;
            validate_non_negative_index("beta", "npart", npart);
            num_params_r__ += npart;
            current_statement_begin__ = 18;
            validate_non_negative_index("delta_phi", "npart", npart);
            num_params_r__ += npart;
            current_statement_begin__ = 19;
            validate_non_negative_index("theta", "npart", npart);
            num_params_r__ += npart;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_Stan_Time_Hier() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 11;
        if (!(context__.contains_r("mubeta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mubeta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mubeta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mubeta", "double", context__.to_vec());
        double mubeta(0);
        mubeta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mubeta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mubeta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 12;
        if (!(context__.contains_r("mudelta_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mudelta_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mudelta_phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mudelta_phi", "double", context__.to_vec());
        double mudelta_phi(0);
        mudelta_phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mudelta_phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mudelta_phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("mutheta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mutheta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mutheta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mutheta", "double", context__.to_vec());
        double mutheta(0);
        mutheta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mutheta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mutheta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("sigmabeta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmabeta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmabeta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmabeta", "double", context__.to_vec());
        double sigmabeta(0);
        sigmabeta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmabeta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmabeta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("sigmadelta_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmadelta_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmadelta_phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmadelta_phi", "double", context__.to_vec());
        double sigmadelta_phi(0);
        sigmadelta_phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmadelta_phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmadelta_phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("sigmatheta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigmatheta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigmatheta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigmatheta", "double", context__.to_vec());
        double sigmatheta(0);
        sigmatheta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigmatheta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigmatheta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "npart", npart);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(npart));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(npart);
        size_t beta_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 2, beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("delta_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_phi");
        pos__ = 0U;
        validate_non_negative_index("delta_phi", "npart", npart);
        context__.validate_dims("parameter initialization", "delta_phi", "vector_d", context__.to_vec(npart));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_phi(npart);
        size_t delta_phi_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < delta_phi_j_1_max__; ++j_1__) {
            delta_phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(delta_phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 19;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "npart", npart);
        context__.validate_dims("parameter initialization", "theta", "vector_d", context__.to_vec(npart));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta(npart);
        size_t theta_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            theta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 11;
            local_scalar_t__ mubeta;
            (void) mubeta;  // dummy to suppress unused var warning
            if (jacobian__)
                mubeta = in__.scalar_constrain(lp__);
            else
                mubeta = in__.scalar_constrain();
            current_statement_begin__ = 12;
            local_scalar_t__ mudelta_phi;
            (void) mudelta_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                mudelta_phi = in__.scalar_constrain(lp__);
            else
                mudelta_phi = in__.scalar_constrain();
            current_statement_begin__ = 13;
            local_scalar_t__ mutheta;
            (void) mutheta;  // dummy to suppress unused var warning
            if (jacobian__)
                mutheta = in__.scalar_constrain(lp__);
            else
                mutheta = in__.scalar_constrain();
            current_statement_begin__ = 14;
            local_scalar_t__ sigmabeta;
            (void) sigmabeta;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmabeta = in__.scalar_lb_constrain(0, lp__);
            else
                sigmabeta = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 15;
            local_scalar_t__ sigmadelta_phi;
            (void) sigmadelta_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmadelta_phi = in__.scalar_lb_constrain(0, lp__);
            else
                sigmadelta_phi = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 16;
            local_scalar_t__ sigmatheta;
            (void) sigmatheta;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmatheta = in__.scalar_lb_constrain(0, lp__);
            else
                sigmatheta = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 17;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_lub_constrain(0, 2, npart, lp__);
            else
                beta = in__.vector_lub_constrain(0, 2, npart);
            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_phi;
            (void) delta_phi;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_phi = in__.vector_constrain(npart, lp__);
            else
                delta_phi = in__.vector_constrain(npart);
            current_statement_begin__ = 19;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.vector_lb_constrain(0, npart, lp__);
            else
                theta = in__.vector_lb_constrain(0, npart);
            // transformed parameters
            current_statement_begin__ = 22;
            validate_non_negative_index("r", "npart", npart);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r(npart);
            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r, DUMMY_VAR__);
            current_statement_begin__ = 23;
            validate_non_negative_index("delta", "npart", npart);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta(npart);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("vss", "npart", npart);
            validate_non_negative_index("vss", "nchoice", nchoice);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> vss(npart, nchoice);
            stan::math::initialize(vss, DUMMY_VAR__);
            stan::math::fill(vss, DUMMY_VAR__);
            current_statement_begin__ = 25;
            validate_non_negative_index("vll", "npart", npart);
            validate_non_negative_index("vll", "nchoice", nchoice);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> vll(npart, nchoice);
            stan::math::initialize(vll, DUMMY_VAR__);
            stan::math::fill(vll, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 26;
            stan::math::assign(delta, Phi(delta_phi));
            current_statement_begin__ = 27;
            stan::math::assign(r, divide(minus(stan::math::log(delta)), 365));
            current_statement_begin__ = 28;
            for (int p = 1; p <= npart; ++p) {
                current_statement_begin__ = 29;
                for (int i = 1; i <= nchoice; ++i) {
                    current_statement_begin__ = 33;
                    stan::model::assign(vss, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                ((get_base1(ss_amnt, p, i, "ss_amnt", 1) * get_base1(beta, p, "beta", 1)) * stan::math::exp((-(get_base1(r, p, "r", 1)) * (get_base1(ss_delay, p, i, "ss_delay", 1) + 1)))), 
                                "assigning variable vss");
                    current_statement_begin__ = 34;
                    stan::model::assign(vll, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                ((get_base1(ll_amnt, p, i, "ll_amnt", 1) * get_base1(beta, p, "beta", 1)) * stan::math::exp((-(get_base1(r, p, "r", 1)) * (get_base1(ll_delay, p, i, "ll_delay", 1) + 1)))), 
                                "assigning variable vll");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 22;
            size_t r_j_1_max__ = npart;
            for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(r(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "r", r, 0);
            current_statement_begin__ = 23;
            size_t delta_j_1_max__ = npart;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(delta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: delta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable delta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "delta", delta, 0);
            check_less_or_equal(function__, "delta", delta, 1);
            current_statement_begin__ = 24;
            size_t vss_j_1_max__ = npart;
            size_t vss_j_2_max__ = nchoice;
            for (size_t j_1__ = 0; j_1__ < vss_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < vss_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(vss(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: vss" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable vss: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 25;
            size_t vll_j_1_max__ = npart;
            size_t vll_j_2_max__ = nchoice;
            for (size_t j_1__ = 0; j_1__ < vll_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < vll_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(vll(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: vll" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable vll: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 39;
            lp_accum__.add(normal_log<propto__>(mubeta, 0.8, 1));
            current_statement_begin__ = 40;
            lp_accum__.add(normal_log<propto__>(mudelta_phi, 0, 1));
            current_statement_begin__ = 41;
            lp_accum__.add(uniform_log<propto__>(mutheta, -(5), 1));
            current_statement_begin__ = 42;
            lp_accum__.add(uniform_log<propto__>(sigmabeta, 0, 0.5));
            current_statement_begin__ = 43;
            lp_accum__.add(uniform_log<propto__>(sigmadelta_phi, 0, 10));
            current_statement_begin__ = 44;
            lp_accum__.add(uniform_log<propto__>(sigmatheta, 0, 2));
            current_statement_begin__ = 45;
            lp_accum__.add(lognormal_log<propto__>(theta, mutheta, sigmatheta));
            current_statement_begin__ = 46;
            for (int p = 1; p <= npart; ++p) {
                current_statement_begin__ = 47;
                lp_accum__.add(normal_log<propto__>(get_base1(beta, p, "beta", 1), mubeta, sigmabeta));
                if (get_base1(beta, p, "beta", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(beta, p, "beta", 1) > 2) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(2, mubeta, sigmabeta), normal_cdf_log(0, mubeta, sigmabeta)));
                current_statement_begin__ = 48;
                lp_accum__.add(normal_log<propto__>(get_base1(delta_phi, p, "delta_phi", 1), mudelta_phi, sigmadelta_phi));
                current_statement_begin__ = 49;
                lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(choices, p, "choices", 1), multiply(get_base1(theta, p, "theta", 1), subtract(get_base1(vll, p, "vll", 1), get_base1(vss, p, "vss", 1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mubeta");
        names__.push_back("mudelta_phi");
        names__.push_back("mutheta");
        names__.push_back("sigmabeta");
        names__.push_back("sigmadelta_phi");
        names__.push_back("sigmatheta");
        names__.push_back("beta");
        names__.push_back("delta_phi");
        names__.push_back("theta");
        names__.push_back("r");
        names__.push_back("delta");
        names__.push_back("vss");
        names__.push_back("vll");
        names__.push_back("postpred");
        names__.push_back("gsq");
        names__.push_back("ll");
        names__.push_back("choiceper");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dims__.push_back(nchoice);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dims__.push_back(nchoice);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dims__.push_back(nchoice);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(npart);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nchoice);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_Stan_Time_Hier_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mubeta = in__.scalar_constrain();
        vars__.push_back(mubeta);
        double mudelta_phi = in__.scalar_constrain();
        vars__.push_back(mudelta_phi);
        double mutheta = in__.scalar_constrain();
        vars__.push_back(mutheta);
        double sigmabeta = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmabeta);
        double sigmadelta_phi = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmadelta_phi);
        double sigmatheta = in__.scalar_lb_constrain(0);
        vars__.push_back(sigmatheta);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_lub_constrain(0, 2, npart);
        size_t beta_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_phi = in__.vector_constrain(npart);
        size_t delta_phi_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < delta_phi_j_1_max__; ++j_1__) {
            vars__.push_back(delta_phi(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta = in__.vector_lb_constrain(0, npart);
        size_t theta_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            vars__.push_back(theta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 22;
            validate_non_negative_index("r", "npart", npart);
            Eigen::Matrix<double, Eigen::Dynamic, 1> r(npart);
            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r, DUMMY_VAR__);
            current_statement_begin__ = 23;
            validate_non_negative_index("delta", "npart", npart);
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta(npart);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("vss", "npart", npart);
            validate_non_negative_index("vss", "nchoice", nchoice);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> vss(npart, nchoice);
            stan::math::initialize(vss, DUMMY_VAR__);
            stan::math::fill(vss, DUMMY_VAR__);
            current_statement_begin__ = 25;
            validate_non_negative_index("vll", "npart", npart);
            validate_non_negative_index("vll", "nchoice", nchoice);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> vll(npart, nchoice);
            stan::math::initialize(vll, DUMMY_VAR__);
            stan::math::fill(vll, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 26;
            stan::math::assign(delta, Phi(delta_phi));
            current_statement_begin__ = 27;
            stan::math::assign(r, divide(minus(stan::math::log(delta)), 365));
            current_statement_begin__ = 28;
            for (int p = 1; p <= npart; ++p) {
                current_statement_begin__ = 29;
                for (int i = 1; i <= nchoice; ++i) {
                    current_statement_begin__ = 33;
                    stan::model::assign(vss, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                ((get_base1(ss_amnt, p, i, "ss_amnt", 1) * get_base1(beta, p, "beta", 1)) * stan::math::exp((-(get_base1(r, p, "r", 1)) * (get_base1(ss_delay, p, i, "ss_delay", 1) + 1)))), 
                                "assigning variable vss");
                    current_statement_begin__ = 34;
                    stan::model::assign(vll, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                ((get_base1(ll_amnt, p, i, "ll_amnt", 1) * get_base1(beta, p, "beta", 1)) * stan::math::exp((-(get_base1(r, p, "r", 1)) * (get_base1(ll_delay, p, i, "ll_delay", 1) + 1)))), 
                                "assigning variable vll");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 22;
            check_greater_or_equal(function__, "r", r, 0);
            current_statement_begin__ = 23;
            check_greater_or_equal(function__, "delta", delta, 0);
            check_less_or_equal(function__, "delta", delta, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t r_j_1_max__ = npart;
                for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                    vars__.push_back(r(j_1__));
                }
                size_t delta_j_1_max__ = npart;
                for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                    vars__.push_back(delta(j_1__));
                }
                size_t vss_j_2_max__ = nchoice;
                size_t vss_j_1_max__ = npart;
                for (size_t j_2__ = 0; j_2__ < vss_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < vss_j_1_max__; ++j_1__) {
                        vars__.push_back(vss(j_1__, j_2__));
                    }
                }
                size_t vll_j_2_max__ = nchoice;
                size_t vll_j_1_max__ = npart;
                for (size_t j_2__ = 0; j_2__ < vll_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < vll_j_1_max__; ++j_1__) {
                        vars__.push_back(vll(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 53;
            validate_non_negative_index("postpred", "npart", npart);
            validate_non_negative_index("postpred", "nchoice", nchoice);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> postpred(npart, nchoice);
            stan::math::initialize(postpred, DUMMY_VAR__);
            stan::math::fill(postpred, DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("gsq", "npart", npart);
            std::vector<double> gsq(npart, double(0));
            stan::math::initialize(gsq, DUMMY_VAR__);
            stan::math::fill(gsq, DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("ll", "nchoice", nchoice);
            std::vector<double> ll(nchoice, double(0));
            stan::math::initialize(ll, DUMMY_VAR__);
            stan::math::fill(ll, DUMMY_VAR__);
            current_statement_begin__ = 56;
            double choiceper;
            (void) choiceper;  // dummy to suppress unused var warning
            stan::math::initialize(choiceper, DUMMY_VAR__);
            stan::math::fill(choiceper, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 57;
            for (int p = 1; p <= npart; ++p) {
                current_statement_begin__ = 58;
                for (int i = 1; i <= nchoice; ++i) {
                    current_statement_begin__ = 59;
                    stan::model::assign(postpred, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                bernoulli_logit_rng((get_base1(theta, p, "theta", 1) * (get_base1(vll, p, i, "vll", 1) - get_base1(vss, p, i, "vss", 1))), base_rng__), 
                                "assigning variable postpred");
                    current_statement_begin__ = 60;
                    stan::math::assign(choiceper, inv_logit((get_base1(theta, p, "theta", 1) * (get_base1(vll, p, i, "vll", 1) - get_base1(vss, p, i, "vss", 1)))));
                    current_statement_begin__ = 61;
                    stan::model::assign(ll, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (logical_eq(get_base1(get_base1(choices, p, "choices", 1), i, "choices", 2), 1) ? stan::math::log(choiceper) : stan::math::log((1 - choiceper)) ), 
                                "assigning variable ll");
                }
                current_statement_begin__ = 63;
                stan::model::assign(gsq, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            (-(2) * sum(ll)), 
                            "assigning variable gsq");
            }
            // validate, write generated quantities
            current_statement_begin__ = 53;
            size_t postpred_j_2_max__ = nchoice;
            size_t postpred_j_1_max__ = npart;
            for (size_t j_2__ = 0; j_2__ < postpred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < postpred_j_1_max__; ++j_1__) {
                    vars__.push_back(postpred(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 54;
            size_t gsq_i_0_max__ = npart;
            for (size_t i_0__ = 0; i_0__ < gsq_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "gsq[i_0__]", gsq[i_0__], 0);
            }
            size_t gsq_k_0_max__ = npart;
            for (size_t k_0__ = 0; k_0__ < gsq_k_0_max__; ++k_0__) {
                vars__.push_back(gsq[k_0__]);
            }
            current_statement_begin__ = 55;
            size_t ll_k_0_max__ = nchoice;
            for (size_t k_0__ = 0; k_0__ < ll_k_0_max__; ++k_0__) {
                vars__.push_back(ll[k_0__]);
            }
            current_statement_begin__ = 56;
            vars__.push_back(choiceper);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_Stan_Time_Hier";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mubeta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mudelta_phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mutheta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmabeta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmadelta_phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmatheta";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_phi_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < delta_phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t r_j_1_max__ = npart;
            for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t delta_j_1_max__ = npart;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t vss_j_2_max__ = nchoice;
            size_t vss_j_1_max__ = npart;
            for (size_t j_2__ = 0; j_2__ < vss_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < vss_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "vss" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t vll_j_2_max__ = nchoice;
            size_t vll_j_1_max__ = npart;
            for (size_t j_2__ = 0; j_2__ < vll_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < vll_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "vll" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t postpred_j_2_max__ = nchoice;
        size_t postpred_j_1_max__ = npart;
        for (size_t j_2__ = 0; j_2__ < postpred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < postpred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "postpred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gsq_k_0_max__ = npart;
        for (size_t k_0__ = 0; k_0__ < gsq_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gsq" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ll_k_0_max__ = nchoice;
        for (size_t k_0__ = 0; k_0__ < ll_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "choiceper";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mubeta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mudelta_phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mutheta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmabeta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmadelta_phi";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmatheta";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_phi_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < delta_phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = npart;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t r_j_1_max__ = npart;
            for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t delta_j_1_max__ = npart;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t vss_j_2_max__ = nchoice;
            size_t vss_j_1_max__ = npart;
            for (size_t j_2__ = 0; j_2__ < vss_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < vss_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "vss" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t vll_j_2_max__ = nchoice;
            size_t vll_j_1_max__ = npart;
            for (size_t j_2__ = 0; j_2__ < vll_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < vll_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "vll" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t postpred_j_2_max__ = nchoice;
        size_t postpred_j_1_max__ = npart;
        for (size_t j_2__ = 0; j_2__ < postpred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < postpred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "postpred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gsq_k_0_max__ = npart;
        for (size_t k_0__ = 0; k_0__ < gsq_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gsq" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ll_k_0_max__ = nchoice;
        for (size_t k_0__ = 0; k_0__ < ll_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "choiceper";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_Stan_Time_Hier_namespace::model_Stan_Time_Hier stan_model;
#endif
